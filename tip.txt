●window->preferences->web->jsp files -> editor -> templates -> new (선택)

●객체 변환

[] -> List
Arrays.asList() = 배열을 List로 변환하기 위한 메서드
	ex) List<FIie> removeFileList = new ArrayList<File>(Arrays.asList(targetFile));

Path -> File
toFile()   =  toFile() 메서드는 Path 객체를 File 객체로 변환하는 데 사용됩니다.
	ex) Fiile targetDir = Paths.get("C:\\upload:, getFolderYesterDay()).toFile();

listFiles() =  해당 디렉터리에 있는 파일 및 디렉터리의 리스트를 가져올 때 사용됩니다.

File -> Path
file.toPath() = File 객체를 Path 객체로 변환 
	ㄴ<Path>file equals <Path>checkFile
	ex) for(<File> file : <File> targetFile) {
		
		List<Path>checkFilePath . forEach(<Path>checkFile -> {
			if(file.toPath().equals(checkFile))
				removeFileList.remove(file);
		});
●배열 vs 리스트 
	배열 = 크기가 고정되어 있고, 한 번 생성된 배열의 크기는 변경할 수 없다.
	리스트 = 크기가 동적으로 조정될 수 있다.

●Calendar 객체는 날짜 및 시간을 처리하고 조작하기 위한 클래스이고, 
	Calendar.getInstance() 는 일반적으로 Calendar 클래스의 인스턴스를 생성하려면 new 키워드와 생성자를 사용	해야 한다. 하지만 getInstance() 를 사용함으로써 생성자를 선언하지 않아도 쉽게 calendar 객체를 사용가능케
 
●이클립스 삭제 폴더 복구
 	ㄴ프로젝트 우 클릭 ->  Restore from local history...,

●배치 프로그램을 사용하는 이유는 서버 내부에서 주기적으로 DB에 이미지 정보가 존재하지 않는 이미지
	파일을 삭제하기 위함.

●DB에서 지정한 날짜를 반환해주는 함수를 제공, MySQL의 경우, "DATA_FORMA" 함수를 제공.

●Logback, Log4j 라이브러리를 사용하여 콘솔창에 표로 된 로그를 볼 수 있게 설정.

●Enum은 특정한 값 중에서 선택하는 상수의 집합을 나타내는 자료형입니다. 
ex) RUNTIME_EXCEPTION(HttpStatus.BAD_REQUEST, "E0001"),
     ACCESS_DENIED_EXCEPTION(HttpStatus.UNAUTHORIZED, "E0002"),
     INTERNAL_SERVER_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, "E0003"),

     SECURITY_01(HttpStatus.UNAUTHORIZED, "S0001", "권한이 없습니다.");

●객체의 상태를 캡슐화하여 외부에서 직접 접근하지 않고 메서드를 통해 상태를 조작하는 것은 객체지향 프로그래밍의 중요한 원칙

●최신 자바스크립트에서는 let과 const를 사용하는 것이 권장되고 있습니다. 
	var는 호이스팅과 스코프의 특성 때문에 발생하는 문제가 있어, let과 const를 사용하는 것이 좋습니다.

	let은 변수를 선언할 때 사용하며, 값의 변경이 가능합니다. const는 상수를 선언할 때 사용하며, 
		한 번 값을 할당하면 변경할 수 없습니다.

●JavaScript에서 문자열을 html이 아닌 JavaScrtip에서 사용하는 이유는, html은 정적인 마크업 언어이기 때문.
	자바스크립트에서 문자열을 동적으로 추가하는 것은 클라이언트 측에서 동적으로 콘텐츠를 변경하거나 업데	이트하는 데 유용합니다. 이를 통해 페이지를 새로 고치지 않고도 사용자 인터랙션 또는 특정 이벤트에 대한 	응답으로 페이지 내용을 업데이트할 수 있습니다.

	ㄴ반론 : <input name="bookName" value="${goodsInfo.bookName}"> 이건 동적 아니야?
		ㄴ위에 코드는 서버 사이드 템플릿 언어 or 프레임워크에서 생성된 것,
			${goodsInfo.bookName} 부분은 서버 사이드 언어는 서버에서 동적으로 생성된 내용을 html로 렌			더링하는데 사용. 
		ㄴ클라이언트 측에서의 동적이라 함은 사용자와의 상호 작용을 통해 동적으로 업데이트 되는 것을 의미.
			ex) 버튼 클릭 or 이벤트에 응답하여 화면의 내용이 변경되는 것.
		   클라이언트 측에서의 동적인 부분은 주로 Javascrtip를 사용하여 처리 된다.
	ㄴ결론 : 따라서 위의 코드는 서버 사이드에서 동적으로 값을 삽입하고 있기 때문에 서버측에서의 동적 코드.
		

●JavaScript에서 문자열을 나타낼 때 작은 따옴표('')나 큰 따옴표("")를 모두 사용,
   ex) 
	str += "<img src='/display?fileName=" + fileCallPath + "'>";
	큰 따옴표로 문자열을 감싸고 있고, 문자열 내에 JavaScript 변수 fileCallPath를 넣기 위해 작은 따옴표를 사용.
	
	String str = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd"));
	위에 코드도 LocalDate 객체의 format 메서드를 사용하여 날짜 -> 문자열로 변환.

● str += 문자열을 작성하지 않게 되면, 이미지가 출력이 되지 않는다.
	str(ex) += 문자열 변수는 HTML 문자열 출력을 위한 코드이고 "+ 동적변수 +" 를 작성해주기 위한
	기본 베이스이다. str += "<img src='/display?fileName=" + fileCallPath + "'>"; 이렇게 코드 작성을 하면,
	str 변수에 HTML 코드 + 동적변수기 누적이 되고, [변수.append(str);] 코드를 통해, 
	str 변수를 출력하여 화면에 나타냄.
	
	결론 => 동적변수를 사용키 위해, 이미지를 출력할 코드를 작성하는 것.

●Type 참조변수 = new Class();

●Windows 운영 체제에서의 구분자.
   1)	"\" 파일 경로 및 디렉토리 구분자, 
		ex) C:\Users\Username\Documents\file.txt
   2)	"/"는 주로 web URL이나 일부 프로그래밍 환경에서 경로 구분자로 사용
		ex) @GetMapping("/display")

● span 태그는 부가 기능 추가하는 역할.
● set.method() 변경자 메서드
	-객체 변수의 값을 바꾸는
	-객체 변수의 값을 매개변수로 넘어오는 값으로 변경함
	-객체 변수의 값을 새로운 값으로 바꾸게 하므로 set 메서드라고 부름
	ㄴVO/DTO Class 의 객체 변수들이 private 로 설정되어 있어서, 직접 접근 가능하게 set 메소드 사용.

● javascript - alert 는 경고창

● const : 한 번 값을 할당하면 재할당할 수 없는 상수 선언 사용할 때,
    let  : 블록 범위 지역 변수를 선언, 값을 다시 할당할 수 있다.
● propertychange change keyup paste input 
	ㄴpropertychange : 요소의 속성(property)이 변경될 때 발생
	ㄴchange : 요소의 값이 변경 될 때 (<input>, <select>, <textarea>)
	ㄴkeyup : 입력란에 텍스트를 입력할 때 마다.
	ㄴpaste : 용자가 컨텍스트 메뉴를 통해 내용을 붙여넣을 때
	ㄴinput : 요소의 값이 변경될 때

● const maxPoint = parseInt('${memberInfo.point}');
	ㄴ '${memberInfo.point}' 이 코드 자체가 문자열로 표현되고 있다.
		ㄴ그래서 parseInt로 문자열 -> 숫자로 변환.

●  eclipse Darkest Dark Theme with DevStyle 2022.6.13(스킨 런처 아이콘, 주석 등등 자동 적용)

● $(document)는 전체 HTML 문서를 jQuery 객체로 감싸는 것이며,
	ㄴDOM은 HTML 문서의 구조를 나타내는 표현 방식이며, jQuery는 이를 더 쉽게 다룰 수 있도록 도와주는 
	   라이브러리 중 하나입니다. $(document)를 사용하면 문서 전체에 대한 jQuery 객체를 얻을 수 있습니다.

● WAS에 대한 설정은 web.xml에 dependency를 등록해주면 된다.
	하지만 스프링에서 해당 데이터를 처리해주기 위해서는 사용하고자 하는 클래스를  bean으로 등록하여

● $("input[name='bookPrice']").on("change", function()
    $("input[type='file']").on("change", function(e)	
    $('.authorId_btn').on("click", function(e)
	ㄴjavascript에서 chang = click은 같은 기능이다. (마우스 클릭 시, 이벤트 발생을 위함.)

●<form> 태그에 속성을 추가하여 속성값을 지정 해줄 수 있다.
	enctype의 속성 값으로는  'application/x-www-form-urlencoded', 'multipart/form-data', 	text/plain' 이 있습니다.

	우리가 보통 <form> 태그에 데이터를 저장하여 서버로 전송할때는 기본값 'application/x~' 사용,
	하지만 파일과 같은 데이터를 주고 받기 위해서는 enctype 속성값 'multipart/form-data' 사용.

● JSTL : 주로 JSP 페이지에서 JAVA 코드 없이도 조건문, 반복문 등을 사용할 수 있도록 도와주는 라이브러리.
  <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

● JSTL를 사용 할 경우, Server(Controller) : model.addAttribute("A", A); 일 경우,
				Client(HTML/JSTL) : <c:forEach items="${list}" var="list">에서 ${}와 서버간 매핑.

● HTML에서 form id=""는 Javascript const/var/let 으로 form id를 선언하고 JQuery 기능을 선언하면 된다.

●<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %> : HTML 코드에 fmt 를 사용, 최상단 설정. 

● JQuery
  <script src="https://code.jquery.com/jquery-3.4.1.js"
  integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU="
  crossorigin="anonymous"></script>


● css가 안뜨고 메인에도 css가 안먹어요
    웹브라우저가 html 렌더링할대 css파일을 다운을 받는데 기존 같은이름이 받아져 있는경우, 
    새로 파일을 받지 않고 해당 파일을 그대로 사용 하는 경우가 많은거 같습니다.

    ㄴ크롬을 이용하는 경우 Ctrl + Shift + R or Shift + F5 로 바로 해결 가능하다. 
   (해당 단축키는 캐시 콘텐츠를 무시하고 현재 페이지 새로고침 하는 단축키)

● Schema = DB에서의 namespace

● (MySQL) = DATE vs TIMESTAMP
	DATE : 날짜 정보만 필요한 경우 (시, 분, 초 정보가 필요 없는 경우)
	TIMESTAMP : 날짜 및 시간 정보가 필요한 경우 / 데이터가 생성되거나 수정된 시간을 기록하려는 경우

● 회원 상세 페이지를 가져올 때, memberId = #{memberId} 만 db에 요청하는데 회원 정보 모두를 가져오는 	이유는 -> SELECT * FROM members where ~ '*' 이거가 모든 컬럼을 가져온다는 뜻이다 활용한거.

●화면상 굳이 사용자에게 보여질 필요는 없고, 개발자에게는 필요한 데이터는 hidden type을 사용한다.

●jquery, javascript에서 "", '' 사용법은 "큰"(문자열 표시), '작은'(따움표 구분, 문자열 상수 표현)

●MySQL 다중 INSERT INTO
	EX)INSERT INTO TABLE (COLUMN1, COLUMN2) VALUES('값1', '값2');
	   INSERT INTO TABLE (COLUMN1, COLUMN2) VALUES('값1', '값2');
	   INSERT INTO TABLE (COLUMN1, COLUMN2) VALUES('값1', '값2');

	 ->INSERT INTO TABLE (COLUMN1, COLUMN2) VALUES('값1','값2'),
		('값1','값2'),
		('값1','값2');

●jQuery에서 사용되는 선택자이다. "HTML 요소"를 찾기 위해 사용.

	-종류-
	id =`'$("#example")`
	class = `$(".example")`
	name = `input[name='example']`
	type = $("input [ type = 'file' ]")

	-사용-
	(Javascript) 내가 선언 한 변수가 HTML의 이 부분을 사용하겠다. 설정을 걸어 놓는 의미?).

	<input type-"file" id="fileName" name='uploadFile'>
		ㄴ$("input [ type = 'file' ]").on("change",~~)
		ㄴlet fileInput = $(input [name="uploadFile"])

	<div id=uploadResult> 
		ㄴ$("#uploadResult")

●${}, val() 차이점
	${} 문자열 내에서 변수나 표현식을 삽입할 때 사용(주로 동적 표현식) 
		ex) let name = "john"; -> let greeting = "hello, ${name}";

	val() jQuery에서 제공하는 메서드로, 주로 HTML 요소의 값을 가져오거나 설정할 때 사용
		ex) let inputValue =$("input[name='username']").val(); // 값 가져오기
		ex) $("input[name='username']").val("New Value"); 값 설정하기

●let userInput 변수는 jQuery를 사용하여 선택한 HTML 요소를 저장하는 과정입니다.	$("#discount_interface")라는 선택자를 사용하여 "discount_interface"라는 ID를 가진 HTML 	요소를 선택했습니다. 이후에 이 객체를 통해 해당 HTML 요소에 대한 작업을 수행 가능해짐.
				ㄴex) let discountRate = userInput.val();

●$(document).ready() 는 jQuery에서 사용되는 이벤트 핸들러로, 문서가 완전히 로드되었을 때 
	실행되는 함수를 정의하는 데에 사용된다. 이는 HTML 문서의 모든 요소가 로드되고 초기화된 후에
	JavaScript 코드가 실행되어야 할 때 유용.
	ㄴ페이지 이벤트 ex) 회원가입 input id= memberId, memberPw, memberName,,, button,, 
	ㄴ함수 내부에 작성된 코드는 무서가 로드된 후에 실행되므로, HTML 문서 내의 모든 요소에 접근 가능.

●$(document).ready(function(){} && $("#~").on("click or chang", function(e){}
	전자는 페이지 기능들을 한 번에 담아서 운영 할 떄, 후자는 이벤트성 클릭, 숫자 변환 등등

●Ajax에서 success 코드 밑에 error 코드 작성할 때, 마지막 전 메서드에 쉼표 붙여주어야 한다.
	ex)
	     success : function(result) {
		console.log(result);
	     },
	     error : function(result) {
		alert("~~")
	     }

●ResponseEntity
뷰로 전송될 HTTP의 세부 정보를 조작하여 뷰로 전송할 수 있다는 점입니다. HTTP는 크게 'status', 'header', 'body' 3개의 범주로 구성되어 있는데 ResponseEntity 클래스에는 'status'와 'header'의 속성들을 조작할 수 있는 메서드들을 제공하고 있습니다.

크롬의 경우 서버와 뷰(웹 브라우저)가 주고받는 Http 데이터를 볼 수 있는데 '크롬 개발자 도구 창(f12)' => 상단 'Network' 클릭 => 'Network' 창 리스트 중 자신이 세부적인 정보를 보고자 하는 http 통신 클릭을 하면 아래와 같이 세부 정보를 볼 수 있습니다.

●String 문자열 변환 (파일 업로드)
MIMETYPE -> probeContentType() 메서드를 이용한 타입 변환(문자열)
UUID.randomUUID().toString 에서의 타입 변환(문자열)

●파일 업로드 로직에서 타입변환을 하는 이유
ㄴex) String saveName = uploadPath + folderPath + uuid + fileName 과 같이 문자열 변수에 맞는 타입을 구현.

●헷갈렸던 문법 : 향상 for문)
ex) for (MultipartFile uploadFile : uploadFiles){} 나는 오른쪽 변수가 하나의 데이터, 왼쪽이 여러 데이터를 담은
	변수라고 생각해서 uploadFile 을 여러개를 담은 채로 반복문을 돌리는 줄 알았는데, 그 반대였다.

	uploadFiles (여러 데이터= 배열)에서 첫 번째 데이터([0]를 uploadFile에 담고, 그 첫 번째 인자로 구현하는 것.
		ex) if (!Objects.requireNonNull (uploadFile.getContentType()) .startWith("image")){
				return new ResponseEntity<>(HttpStatus.FORBIDDEN);
		     } 

●파일 경로에서 파일 이름을 추출하는 코드
String fileName = filePath.substring(filePath.lastIndexOf("\\") + 1);
ㄴ("\\") : 백슬래쉬가 두 개인 이유는 Java에서 문자열에서 백슬래쉬는 이스케이프 문자로 사용된다. 
	따라서 백슬래시 자체를 문자열에 포함시키기 위해서는 두 번 사용해야 한다.

ㄴ+1 : 마지막에 +1 을 해주는 이유는 파일 경로에서 파일 이름을 추출하기 위해서.
	백슬래시가 나타나는 마지막 위치의 인덱스를 반환, 그러나 파일 이름은 이 위치 이후에 나오기 때문에
		 +1을 추가하여, 파일의 이름만을 얻을 수 있다.

●"yyyy/MM/dd" 사용 후, replace "/" 구분자를 왜 또 사용하는 것일까?
ex) 
 String str = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd"));
 String folderPath = str.replace("/", File.separator);

ㄴ이유는 "yyyy/MM/dd"에서 사용되는 "/"는 시각적인 표현을 위한 것이고, 파일 경로로 사용할 때에는
	유효한 파일 경로로 변환해주어야 한다. 파일 시스템에 따라 디렉토리 구분자가 '/'가 아닐 수 있기 때문에.
		(windows 에서는 '\', Linus 에서는 '/' 를 디렉토리 구분자로 사용하기 때문이다.)

●Files.probeContentType()
ㄴ파일 확장자에 따라 브라우저에 전송하는 MIME 타입이 달라져야 하는 문제 해결.

●
URL 인코딩(Encode):

목적: URL에 사용할 수 없는 특수 문자나 공백과 같은 문자들을 안전하게 전송하기 위해 해당 문자들을 변환.
방법: 특정 문자들을 % 기호와 함께 해당 문자의 ASCII 코드나 UTF-8 인코딩 등으로 변환.
예시: 공백을 %20, 물음표를 %3F 등으로 변환.

URL 디코딩(Decode):

목적: URL에서 인코딩된 문자를 다시 원래의 문자로 변환하여 읽을 수 있게 하는 과정.
방법: % 기호와 함께 오는 ASCII 코드나 UTF-8 인코딩 등을 해당 문자로 변환.
예시: %20을 공백으로, %3F을 물음표로 변환.

간단한 예를 통해 이해를 돕겠습니다. 다음은 "Hello, World!"를 URL 인코딩하고 디코딩하는 예시입니다:

	인코딩 예시:

	원본 문자열: Hello, World!
	URL 인코딩: Hello%2C%20World%21
	
	디코딩 예시:

	인코딩된 문자열: Hello%2C%20World%21
	URL 디코딩: Hello, World!

●Slf4j.xml 설정
이슈 : controller 외 serviceImpl 작업 중 확인하고자 log를 사용하려고 했는데, log가 찍히지 않음
원인 : Slf4j.xml 에 service class 를 추가해주지 않았다.
해결
<!-- Application Loggers -->
	<logger name="com.joo.controller">
		<level value="info" />
	</logger>
	
	<logger name="com.joo.service">
		<level value="info" />
	</logger>

●transcation 설정
1.root-context.xml 에 DataSourceTransactionManager 클래스 bean 등록,
2.namespace 탭에서 tx 항목을 체크.
3.<tx:annotation-driven /> 추가.

----------------------------------------------------Mapper Class ----------------------------------------------------

●Mapper.java class 는 interface class 이고, MyBatis는 인터페이스를 사용하여, SQL 쿼리를 정의, 이를 매핑
	(인터페이스 기반의 매퍼를 사용하면 MyBatis 가 해당 인터페이스를 구현하는 구현클래스를 동적으로 생성.)
	
	ㄴ인터페이스의 메서드 이름과 Mapper XML 파일에서 정의한 SQL 문의 id가 일치하면,		
		MyBatis는 이를 자동으로 매핑하여 SQL을 실행하게 됩니다.

ADD = 1.HTML(name, id, class, type)은 VO/DTO 변수명과 같아야 한다.
	  2.DB Column name 과 VO/DTO 클래스의 객체 필드명이 같아야 한다.
	  3.MyBatis의 xml <select id="Mapper class의 method name">

●필드 이름이 camelCase로 되어 있으면, 데이터베이스 컬럼 이름은 snake_case로 매핑됩니다.

	resultMap - 그러나 이름이 완전 일치하지 않으면, resultMap 을 사용하여 각 컬럼에 대해 매핑할 필드 지정.
		ex)	<resultMap id="bookResultMap" type="Book">

	resultType - SQL 쿼리의 결과를 매핑할 자바 객체의 클래스를 지정하는데 사용. (주로 SELECT문에서 사용)
		ex) 	<select id="~~" resultType="com.example.Book>
		ㄴ해당 SELECT 쿼리의 결과를 "com.example.Book" 클래스로 매핑하겠다는 의미.
		ㄴ추가로 db에서 가져온 데이터(반환 값)를 mapper class에 전달하는 기능도 있따.

	-> 결과가 단일 값을 반환하는 경우라면, resultType 대신에 resultMap을 사용하기도 합니다. 

●Service = interface / ServiceImpl = 구현체
	ㄴService 는 비즈니스 로직에 대한 메서드를 정의한 인터페이스/ Impl 은 인터페이스를 구현한 구현체.

---------------------------------------------------------반환---------------------------------------------------------

 XML -> Mapper = <resultType = "com.joo.model.BookVo">
		ㄴSQL 쿼리의 결과를 BookVO 클래스의 객체로 매핑한다/ 각 행은 BookVO 클래스 인스턴스로 반환.
	
 Mapper -> Impl = 클래스는 그 안에 실제적인 SQL 쿼리문과 그 결과를 반환할 메서드가 선언 되어있다.
		ex) public List<BookVO> goodsGetList(Criteria cri);	
			ㄴ반환 타입은 'List<BookVO>' 이다. MyBatis는 goodsGetList 메서드를 								실행할 때 이에 해당하는 SQL을 실행. 그 결과를 '''List<BookVO>'''에 반환 한다.

 Impl -> Service = 메서드를 구현한 인터페이스에서 해당 메서드의 반환 타입으로 지정된 데이터를 반환.
		ex) @Override
		     public List<BookVO> goodsGetList(~~)
			ㄴ반환 타입은 'List<BookVO>' 이다.

 Service -> Controller = 데이터의 반환은 주로 HTTP 응답을 통해 이루어지고, 클라이언트에게 데이터 전달.


------------------------------------------------------Annot/Method------------------------------------------------------
Map -> JSON
●writeValueAsString(Value); = value : String 타입으로 변환할 대상.
●readValue(arg, type) =  arg : 지정된 타입으로 변환할 대상 / type : 어떤 타입으로 변환 할 것인지 명시. 

●toLocaleString()
숫자를 해당 지역 설정에 맞는 문자열로 변환하는 데 사용(특정 국가 or 언어의 형식).
ex)
const number = 1234567.89;
const formattedNumber = number.toLocaleString(); // 기본 지역 설정에 따라 포맷
console.log(formattedNumber); // 출력 예: "1,234,567.89"

●is()
선택한 요소 집합 중에서 주어진 선택자, 요소 or jQuery 객체와 일치하는 요소가 있는지 여부를 확인.
ex)
if($(element).find(".individual_cart_checkbox").is(":checked") === true)

●@PathVariable
@GetMapping("/goodsDetail/{bookId}")
public String getGoodsDetail(@PathVariable("bookId")int bookId, Model model) {}

	{bookId} : 경로 변수에서 요청의 부분을 담당하고 있다.
	@PathVariable("bookId") : "bookId" 는 처리의 부분을 담당하고 있다.

	-요청에서{bookId}, data를 가져와서 메서드의 파라미터(bookId)로 전달하는 것입니다.
	ex)@GetMapping("/display"{id}")
		public String getDisplay(@PathVariable int id) or ("id")int id,

-----------------------------------------------------------Query-----------------------------------------------------------

● join할때, join 할 테이블의 PK 값을 조인 쿼리 변수로 묶고 묶인 테이블에서 필요한 값을 기존 테이블에 넣음.
	ex)
	[joo_book table colums]
	select a.bookId, a.bookName, a.authorId, b.authorName, a.publeYear, a.cateCode, c.cateName, 				a.bookPrice, a.bookStock, a.bookDiscount, a.bookIntro, a.bookContents
	from joo_book a 
			left outer join 
				joo_author b 
						on a.authorId = b.authorId
			left outer join 
				joo_bcate c
						on a.cateCode = c.cateCode	
	
	위에 쿼리문에서 joo_book table에는 원래 authorName, cateName은 없다.
	그래서 해당 데이터를 가져오기 위해, 해당 테이블의 PK 값을 ON으로 가져오는 듯 하다.
